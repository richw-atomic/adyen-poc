<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sessions Components</title>
    <%- include ('header.ejs'); -%>
  </head>
  <body>
    <div class="container" x-data="adyenCheckout()">
      <h1>Sessions Components</h1>

      <!-- Loading State -->
      <div x-show="status === 'loading'">
        <p style="text-align: center">Loading Checkout...</p>
      </div>

      <p>Current Status: <span x-text="status"></span></p>

      <div x-show="status !== 'success'">
        <div id="component-scheme-container"></div>
        <div class="wallets-wrapper">
          <div id="component-applepay-container"></div>
          <div id="component-googlepay-container"></div>
        </div>
      </div>

      <%- include ('debug.ejs'); -%>
    </div>

    <script>
      function adyenCheckout() {
        const amount = { value: 9000, currency: "GBP" };
        return {
          clientKey: "<%- clientKey %>", // Injected by EJS
          session: {},
          amount,
          paymentResponse: {},
          adyenDropinComponent: null,
          status: "initial", // initial, loading, ready, error, success
          errorMessage: "",

          init() {
            if (
              !this.clientKey ||
              this.clientKey.includes("YOUR_ADYEN_CLIENT_KEY")
            ) {
              this.errorMessage =
                "Adyen Client Key not configured on the server. Please set ADYEN_CLIENT_KEY in your .env file.";
              this.status = "error";
              return;
            }

            const urlParams = new URLSearchParams(window.location.search);
            const paymentId = urlParams.get("paymentId");
            const resultCode = urlParams.get("resultCode");
            const errorMessage = urlParams.get("errorMessage");

            if (paymentId && resultCode) {
              this.paymentResponse = {
                paymentId: paymentId,
                resultCode: resultCode,
                pspReference: urlParams.get("pspReference"),
                refusalReason: urlParams.get("refusalReason"),
              };
              if (errorMessage) {
                this.errorMessage = `Payment Error: ${errorMessage}`;
                this.status = "error";
              } else if (resultCode === "Authorised") {
                this.status = "success";
              } else if (
                ["IdentifyShopper", "ChallengeShopper"].includes(resultCode)
              ) {
                this.status = "pendingAction";
              } else {
                this.status = "error";
              }
              window.history.replaceState(
                {},
                document.title,
                window.location.pathname
              );
              this.initializeAdyen();
            } else {
              this.initSession();
            }
          },

          async initSession() {
            this.status = "loading";
            this.errorMessage = "";
            try {
              await this.createSession();
              await this.initializeAdyen();
              this.status = "ready";
            } catch (err) {
              console.error("initAdyen: Caught error:", err);
              this.errorMessage = `Sessions Error: ${err.message}`;
              this.status = "error";
            }
          },

          async initializeAdyen() {
            const checkout = await AdyenWeb.AdyenCheckout({
              session: this.session,
              clientKey: this.clientKey,
              locale: "en-US",
              countryCode: "GB",
              environment: "test",
              amount: this.amount,
              onAdditionalDetails: async (state, component, actions) => {
                try {
                  console.log(state);
                  // Make a POST /payments/details request from your server.
                  const result = await this.addPaymentDetails(state.data);

                  // If the /payments/details request from your server fails, or if an unexpected error occurs.
                  if (!result.resultCode) {
                    actions.reject();
                    return;
                  }

                  const { resultCode, action, order, donationToken } = result;

                  // If the /payments/details request request from your server is successful, you must call this to resolve whichever of the listed objects are available.
                  // You must call this, even if the result of the payment is unsuccessful.
                  actions.resolve({
                    resultCode,
                    action,
                    order,
                    donationToken,
                  });
                } catch (error) {
                  console.error("onSubmit", error);
                  actions.reject();
                }
              },
              onActionHandled: (action) => {
                console.info("Action Handled", action);
              },
              onPaymentCompleted: (result, component) => {
                console.info(result, component);
                this.paymentResponse = result;
                if (this.paymentResponse.resultCode === "Authorised") {
                  this.status = "success";
                } else {
                  this.status = "error";
                }
              },
              onPaymentFailed: (result, component) => {
                console.info(result, component);
              },
              onError: (error, component) => {
                console.error(
                  error.name,
                  error.message,
                  error.stack,
                  component
                );
                console.log(component);
              },
            });
            console.log(checkout);
            checkout.paymentMethodsResponse.paymentMethods.forEach((paymentMethod) => {
              const paymentMethodClass = AdyenWeb[paymentMethod.name.replace(' ', '')];
              if (paymentMethodClass) {
                console.log(paymentMethod.type);
                this.adyenDropinComponent = new paymentMethodClass(checkout).mount(
                  `#component-${paymentMethod.type}-container`
                );
              } else if (paymentMethod.name === 'Cards') {
                console.log(paymentMethod.type);
                this.adyenDropinComponent = new AdyenWeb.Card(checkout).mount(
                  `#component-${paymentMethod.type}-container`
                );
              }
            });
            console.log(
              "initializeAdyen: Adyen dropin component mounted.",
              this.adyenDropinComponent
            );
          },

          async createSession() {
            try {
              console.log("createSession: Attempting to fetch /api/sessions...");
              const response = await fetch("/api/sessions", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ amount, path: "sessions/dropin" }),
              });

              console.log("createSession: Received response from /api/sessions.");
              if (!response.ok) {
                const err = await response.json();
                console.error("createSession: Server responded with error:", err);
                throw new Error(err.message || "Failed to create session.");
              }

              Object.assign(this.session, await response.json());
              console.log("createSession: Session created:", this.session);
            } catch (error) {
              this.errorMessage = `Sessions Error: ${err.message}`;
              this.status = "error";
              throw error;
            }
          },
          // DIFFERENT ENDPOINT TO ADVANCED DUE TO ORDER ID MISSING IN SESSIONS
          async addPaymentDetails(data) {
            try {
              const response = await fetch(`/api/payments/details/session/${this.session.id}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(data),
              });

              this.paymentResponse = await response.json();

              if (!response.ok) {
                throw new Error(
                  this.paymentResponse.message || "Payment confirmation failed."
                );
              }

              return this.paymentResponse;
            } catch (err) {
              this.errorMessage = `Payment Error: ${err.message}`;
              this.status = "error";
            }
          },
        };
      }
    </script>
  </body>
</html>
